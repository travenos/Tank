/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tank;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.net.InetSocketAddress;
import java.net.Socket;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.INFORMATION_MESSAGE;

/**
 *
 * @author 1
 */
public class mainJFrame extends javax.swing.JFrame {

    /**
     * Creates new form mainJFrame
     */
    private Socket client = null;
    private static ReadServer input = null;
    private static GetVideo video = null;
    private boolean goingForward = false;
    private boolean goingBack = false;
    
    private boolean sendParam=false; //Отправлять ли параметры на сервер

    private int lastIndex = 0; //Номер последней открытой вкладки

    public mainJFrame() {
        initComponents();
        controlField.setBackground(Color.lightGray);
        this.setIconImage(new ImageIcon(getClass().getResource("/tank/icons/app_icon.png")).getImage());
        //Считывание настроек
        /*
        try {
            File jarpath = new File(mainJFrame.class.getProtectionDomain().getCodeSource().getLocation().toURI());
            File paramFile = new File(jarpath.getParent() + "/param.ini");
            if (paramFile.exists()) {
                FileReader fileStream = new FileReader(paramFile);
                BufferedReader reader = new BufferedReader(fileStream);
                Hmin.setValue(Integer.parseInt(reader.readLine()));
                Hmax.setValue(Integer.parseInt(reader.readLine()));
                Smin.setValue(Integer.parseInt(reader.readLine()));
                Smax.setValue(Integer.parseInt(reader.readLine()));
                Bmin.setValue(Integer.parseInt(reader.readLine()));
                Bmax.setValue(Integer.parseInt(reader.readLine()));
                TD.setValue(Integer.parseInt(reader.readLine()));
                reader.close();
                fileStream.close();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
        */
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        ip = new javax.swing.JTextField();
        port = new javax.swing.JTextField();
        message = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        speedControl = new javax.swing.JSlider();
        jLabel4 = new javax.swing.JLabel();
        controlField = new javax.swing.JTextField();
        buttonRight = new javax.swing.JToggleButton();
        buttonBack = new javax.swing.JToggleButton();
        buttonGo = new javax.swing.JToggleButton();
        buttonLeft = new javax.swing.JToggleButton();
        speedLabel = new javax.swing.JLabel();
        buttonSTOP = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        toggleTracking = new javax.swing.JToggleButton();
        autoStopCheck = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        sendPARAM = new javax.swing.JButton();
        TD = new javax.swing.JSlider();
        jLabel15 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        Bmax = new javax.swing.JSlider();
        jLabel5 = new javax.swing.JLabel();
        Hmin = new javax.swing.JSlider();
        jLabel14 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        Smin = new javax.swing.JSlider();
        Smax = new javax.swing.JSlider();
        jLabel13 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        Bmin = new javax.swing.JSlider();
        Hmax = new javax.swing.JSlider();
        LabelHmin = new javax.swing.JLabel();
        LabelHmax = new javax.swing.JLabel();
        LabelSmin = new javax.swing.JLabel();
        LabelSmax = new javax.swing.JLabel();
        LabelBmin = new javax.swing.JLabel();
        LabelBmax = new javax.swing.JLabel();
        LabelTD = new javax.swing.JLabel();
        toggleAdjust = new javax.swing.JToggleButton();
        jLabel16 = new javax.swing.JLabel();
        adjustButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        canvas1 = new java.awt.Canvas();
        stateField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        toggleFF = new javax.swing.JToggleButton();
        toggleVideo = new javax.swing.JToggleButton();
        clearMsg = new javax.swing.JButton();
        buttonShutdown = new javax.swing.JButton();
        buttonReboot = new javax.swing.JButton();
        buttonRestart = new javax.swing.JButton();
        buttonAbout = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Platform controller");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        ip.setText("192.168.150.1");
        ip.setToolTipText("");
        ip.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ipKeyPressed(evt);
            }
        });

        port.setText("8888");
        port.setToolTipText("");
        port.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                portKeyPressed(evt);
            }
        });

        message.setToolTipText("");
        message.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                messageKeyPressed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tank/icons/network-transmit.png"))); // NOI18N
        jButton1.setText("Connect");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tank/icons/document-send.png"))); // NOI18N
        jButton2.setEnabled(false);
        jButton2.setLabel("Send");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tank/icons/network-offline.png"))); // NOI18N
        jButton3.setEnabled(false);
        jButton3.setLabel("Disconnect");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setText("IP address");

        jLabel3.setText("Message");

        jTabbedPane2.setEnabled(false);
        jTabbedPane2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane2StateChanged(evt);
            }
        });

        speedControl.setMaximum(255);
        speedControl.setMinimum(40);
        speedControl.setOrientation(javax.swing.JSlider.VERTICAL);
        speedControl.setValue(180);
        speedControl.setFocusable(false);
        speedControl.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                speedControlStateChanged(evt);
            }
        });

        jLabel4.setText("Speed");
        jLabel4.setFocusable(false);

        controlField.setEditable(false);
        controlField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        controlField.setText("Click here for control with keys");
        controlField.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        controlField.setEnabled(false);
        controlField.setHighlighter(null);
        controlField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                controlFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                controlFieldFocusLost(evt);
            }
        });
        controlField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                controlFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                controlFieldKeyReleased(evt);
            }
        });

        buttonRight.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tank/icons/go-next.png"))); // NOI18N
        buttonRight.setText("Right");
        buttonRight.setEnabled(false);
        buttonRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRightActionPerformed(evt);
            }
        });

        buttonBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tank/icons/go-down.png"))); // NOI18N
        buttonBack.setText("Backward ");
        buttonBack.setEnabled(false);
        buttonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBackActionPerformed(evt);
            }
        });

        buttonGo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tank/icons/go-up.png"))); // NOI18N
        buttonGo.setText("Forward");
        buttonGo.setEnabled(false);
        buttonGo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGoActionPerformed(evt);
            }
        });

        buttonLeft.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tank/icons/go-previous.png"))); // NOI18N
        buttonLeft.setText("Left");
        buttonLeft.setEnabled(false);
        buttonLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLeftActionPerformed(evt);
            }
        });

        speedLabel.setText("180");

        buttonSTOP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tank/icons/process-stop.png"))); // NOI18N
        buttonSTOP.setText("STOP");
        buttonSTOP.setEnabled(false);
        buttonSTOP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSTOPActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(controlField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(86, 86, 86)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(buttonBack)
                                    .addComponent(buttonGo, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(speedLabel, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(buttonLeft)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonRight)
                        .addGap(28, 28, 28))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addComponent(buttonSTOP)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(speedControl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(speedLabel)
                .addGap(8, 8, 8)
                .addComponent(buttonGo)
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonRight)
                    .addComponent(buttonLeft))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonBack)
                .addGap(18, 18, 18)
                .addComponent(controlField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonSTOP)
                .addGap(32, 32, 32))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(speedControl, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Manual", jPanel2);

        toggleTracking.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tank/icons/media-playback-start.png"))); // NOI18N
        toggleTracking.setText("GO!");
        toggleTracking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleTrackingActionPerformed(evt);
            }
        });

        autoStopCheck.setSelected(true);
        autoStopCheck.setText("Stop the platform when connection is lost");
        autoStopCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoStopCheckActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(153, 153, 153)
                        .addComponent(toggleTracking))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(autoStopCheck)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(102, 102, 102)
                .addComponent(toggleTracking)
                .addGap(18, 18, 18)
                .addComponent(autoStopCheck)
                .addContainerGap(136, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Point tracking", jPanel3);

        sendPARAM.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tank/icons/document-send.png"))); // NOI18N
        sendPARAM.setText("Send Values");
        sendPARAM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendPARAMActionPerformed(evt);
            }
        });

        TD.setMaximum(160);
        TD.setMinimum(25);
        TD.setValue(80);
        TD.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TDStateChanged(evt);
            }
        });

        jLabel15.setText("Minimum");

        jLabel8.setText("Brightness");

        Bmax.setMaximum(255);
        Bmax.setMinimum(101);
        Bmax.setValue(255);
        Bmax.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                BmaxStateChanged(evt);
            }
        });

        jLabel5.setText("Hue");

        Hmin.setMaximum(178);
        Hmin.setValue(170);
        Hmin.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                HminStateChanged(evt);
            }
        });

        jLabel14.setText("Max");

        jLabel9.setText("Min");

        Smin.setMaximum(254);
        Smin.setValue(150);
        Smin.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                SminStateChanged(evt);
            }
        });

        Smax.setMaximum(255);
        Smax.setMinimum(151);
        Smax.setValue(255);
        Smax.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                SmaxStateChanged(evt);
            }
        });

        jLabel13.setText("Max");

        jLabel10.setText("Min");

        jLabel7.setText("Saturation");

        jLabel11.setText("Min");

        jLabel12.setText("Max");

        Bmin.setMaximum(254);
        Bmin.setValue(100);
        Bmin.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                BminStateChanged(evt);
            }
        });

        Hmax.setMaximum(179);
        Hmax.setMinimum(171);
        Hmax.setValue(179);
        Hmax.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                HmaxStateChanged(evt);
            }
        });

        LabelHmin.setText("170");

        LabelHmax.setText("179");

        LabelSmin.setText("150");

        LabelSmax.setText("255");

        LabelBmin.setText("100");

        LabelBmax.setText("255");

        LabelTD.setText("80");

        toggleAdjust.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tank/icons/starred.png"))); // NOI18N
        toggleAdjust.setText("Start adjusting");
        toggleAdjust.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleAdjustActionPerformed(evt);
            }
        });

        jLabel16.setText("delay (ms)");

        adjustButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tank/icons/document-page-setup.png"))); // NOI18N
        adjustButton.setText("Adjust distance");
        adjustButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adjustButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel4Layout.createSequentialGroup()
                                    .addComponent(jLabel7)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel10)
                                        .addComponent(jLabel13)))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(jLabel11)))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel14)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(Smax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(LabelSmax))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(Smin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(LabelSmin))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(Hmin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(LabelHmin))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(Hmax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(LabelHmax))))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(sendPARAM)
                        .addGap(34, 34, 34)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(toggleAdjust)
                            .addComponent(adjustButton)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel12)))
                            .addComponent(jLabel15)
                            .addComponent(jLabel16))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(TD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(LabelTD))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(Bmax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(LabelBmax))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(Bmin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(LabelBmin)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(jLabel5)
                                .addGap(5, 5, 5))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(Hmin, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(LabelHmin))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Hmax, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(LabelHmax, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(jLabel7))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addComponent(Smin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(LabelSmin))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel13)
                                    .addComponent(Smax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(LabelSmax)))))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel14)))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel8))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Bmin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)
                            .addComponent(LabelBmin))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(Bmax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LabelBmax))))
                .addGap(13, 13, 13)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel16)
                        .addComponent(TD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(LabelTD))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sendPARAM)
                    .addComponent(adjustButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(toggleAdjust)
                .addGap(18, 18, 18))
        );

        LabelTD.getAccessibleContext().setAccessibleName("12");

        jTabbedPane2.addTab("Settings", jPanel4);

        jLabel6.setText("Port");

        stateField.setEditable(false);
        stateField.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        stateField.setDoubleBuffered(true);

        jLabel2.setText("Last server message");

        toggleFF.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tank/icons/ffmpeg.png"))); // NOI18N
        toggleFF.setText("FFserver");
        toggleFF.setEnabled(false);
        toggleFF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleFFActionPerformed(evt);
            }
        });

        toggleVideo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tank/icons/camera-web.png"))); // NOI18N
        toggleVideo.setText("Show Video");
        toggleVideo.setEnabled(false);
        toggleVideo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleVideoActionPerformed(evt);
            }
        });

        clearMsg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tank/icons/edit-clear.png"))); // NOI18N
        clearMsg.setText("Clear messages");
        clearMsg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearMsgActionPerformed(evt);
            }
        });

        buttonShutdown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tank/icons/system-shutdown.png"))); // NOI18N
        buttonShutdown.setText("Shutdown");
        buttonShutdown.setEnabled(false);
        buttonShutdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonShutdownActionPerformed(evt);
            }
        });

        buttonReboot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tank/icons/view-refresh.png"))); // NOI18N
        buttonReboot.setText("Reboot");
        buttonReboot.setEnabled(false);
        buttonReboot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRebootActionPerformed(evt);
            }
        });

        buttonRestart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tank/icons/system-run.png"))); // NOI18N
        buttonRestart.setText("Server restart");
        buttonRestart.setEnabled(false);
        buttonRestart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRestartActionPerformed(evt);
            }
        });

        buttonAbout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tank/icons/help-about.png"))); // NOI18N
        buttonAbout.setText("About");
        buttonAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAboutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(toggleFF))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(toggleVideo)))
                                .addGap(19, 19, 19))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(ip, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(port, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel6)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jButton1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton3))
                                    .addComponent(jButton2)
                                    .addComponent(message, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(buttonAbout))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(58, 58, 58)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(buttonRestart)
                                        .addGap(18, 18, 18)
                                        .addComponent(buttonShutdown)
                                        .addGap(25, 25, 25)
                                        .addComponent(buttonReboot))
                                    .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(clearMsg))))
                    .addComponent(stateField))
                .addGap(20, 20, 20))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonShutdown)
                            .addComponent(buttonReboot)
                            .addComponent(buttonRestart))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton3))
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(toggleVideo))
                        .addGap(1, 1, 1)
                        .addComponent(message, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(toggleFF))
                        .addGap(18, 18, 18)
                        .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(buttonAbout)
                    .addComponent(clearMsg))
                .addGap(8, 8, 8)
                .addComponent(stateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jButton2.getAccessibleContext().setAccessibleDescription("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        try {
            client.close();
            if (input != null) {
                input.stop();
            }
            if (video != null) {
                //video.finish();
                video.interrupt();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
    }//GEN-LAST:event_formWindowClosed

    private void controlFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_controlFieldKeyReleased
        switch (evt.getKeyCode()) {
            case 38: //Прекращение движения вперёд
            {
                if (buttonGo.isSelected()) {
                    buttonGo.setSelected(false);
                    buttonGoActionPerformed(null);
                } else {
                    goingForward = false;
                }
                break;
            }
            case 40: //Движение назад
            {
                if (buttonBack.isSelected()) {
                    buttonBack.setSelected(false);
                    buttonBackActionPerformed(null);
                } else {
                    goingBack = false;
                }
                break;
            }
            case 37: //Прекращение движения влево
            {
                if (buttonLeft.isSelected()) {
                    buttonLeft.setSelected(false);
                    buttonLeftActionPerformed(null);
                    if (goingForward) {
                        buttonGo.setSelected(true);
                        buttonGoActionPerformed(null);
                    } else if (goingBack) {
                        buttonBack.setSelected(true);
                        buttonBackActionPerformed(null);
                    }
                }
                break;
            }
            case 39: //Прекращение движения вправо
            {
                if (buttonRight.isSelected()) {
                    buttonRight.setSelected(false);
                    buttonRightActionPerformed(null);
                    if (goingForward) {
                        buttonGo.setSelected(true);
                        buttonGoActionPerformed(null);
                    } else if (goingBack) {
                        buttonBack.setSelected(true);
                        buttonBackActionPerformed(null);
                    }
                }
                break;
            }
        }
    }//GEN-LAST:event_controlFieldKeyReleased

    private void controlFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_controlFieldKeyPressed
        switch (evt.getKeyCode()) {
            case 38: //Движение вперёд
            {
                if (!buttonGo.isSelected() && buttonGo.isEnabled()) {
                    buttonGo.setSelected(true);
                    buttonGoActionPerformed(null);
                }
                break;
            }
            case 40: //Движение назад
            {
                if (!buttonBack.isSelected() && buttonBack.isEnabled()) {
                    buttonBack.setSelected(true);
                    buttonBackActionPerformed(null);
                }
                break;
            }
            case 37: //Движение влево
            {
                if (!(buttonLeft.isSelected() || buttonRight.isSelected())) {
                    buttonLeft.setEnabled(true);
                    buttonLeft.setSelected(true);
                    buttonLeftActionPerformed(null);
                }
                break;
            }
            case 39: //Движение вправо
            {
                if (!(buttonLeft.isSelected() || buttonRight.isSelected())) {
                    buttonRight.setEnabled(true);
                    buttonRight.setSelected(true);
                    buttonRightActionPerformed(null);
                }
                break;
            }
        }
    }//GEN-LAST:event_controlFieldKeyPressed

    private void controlFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_controlFieldFocusLost
        controlField.setBackground(Color.lightGray);
        controlField.setText("Click here for control with keys");
    }//GEN-LAST:event_controlFieldFocusLost

    private void controlFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_controlFieldFocusGained
        controlField.setBackground(Color.green);
        controlField.setText("Keyboard control is on");
    }//GEN-LAST:event_controlFieldFocusGained

    private void buttonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBackActionPerformed
        // TODO add your handling code here:
        try {
            if (buttonBack.isSelected()) {
                buttonGo.setEnabled(false);
                buttonLeft.setEnabled(false);
                buttonRight.setEnabled(false);
                String speed = String.valueOf(speedControl.getValue());
                String command = "R-" + speed + ":L-" + speed + ":\n";
                client.getOutputStream().write(command.getBytes());
                client.getOutputStream().flush();
                System.out.println("Еду назад");
                goingBack = true;
            } else {
                buttonGo.setEnabled(true);
                buttonLeft.setEnabled(true);
                buttonRight.setEnabled(true);
                client.getOutputStream().write("R0:L0:\n".getBytes());
                client.getOutputStream().flush();
                System.out.println("Остановка");
                goingBack = false;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
    }//GEN-LAST:event_buttonBackActionPerformed

    private void buttonLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLeftActionPerformed
        // TODO add your handling code here:
        try {
            if (buttonLeft.isSelected()) {
                buttonBack.setEnabled(false);
                buttonGo.setEnabled(false);
                buttonRight.setEnabled(false);
                String speed = String.valueOf(speedControl.getValue());
                String command = "R" + speed + ":L-" + speed + ":\n";
                client.getOutputStream().write(command.getBytes());
                client.getOutputStream().flush();
                System.out.println("Еду влево");
            } else {
                buttonBack.setEnabled(true);
                buttonGo.setEnabled(true);
                buttonRight.setEnabled(true);
                client.getOutputStream().write("R0:L0:\n".getBytes());
                client.getOutputStream().flush();
                System.out.println("Остановка");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
    }//GEN-LAST:event_buttonLeftActionPerformed

    private void buttonRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRightActionPerformed
        try {
            if (buttonRight.isSelected()) {
                buttonBack.setEnabled(false);
                buttonLeft.setEnabled(false);
                buttonGo.setEnabled(false);
                String speed = String.valueOf(speedControl.getValue());
                String command = "R-" + speed + ":L" + speed + ":\n";
                client.getOutputStream().write(command.getBytes());
                client.getOutputStream().flush();
                System.out.println("Еду вправо");
            } else {
                buttonBack.setEnabled(true);
                buttonLeft.setEnabled(true);
                buttonGo.setEnabled(true);
                client.getOutputStream().write("R0:L0:\n".getBytes());
                client.getOutputStream().flush();
                System.out.println("Остановка");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
    }//GEN-LAST:event_buttonRightActionPerformed

    private void buttonGoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGoActionPerformed
        try {
            if (buttonGo.isSelected()) {
                buttonBack.setEnabled(false);
                buttonLeft.setEnabled(false);
                buttonRight.setEnabled(false);
                String speed = String.valueOf(speedControl.getValue());
                String command = "R" + speed + ":L" + speed + ":\n";
                client.getOutputStream().write(command.getBytes());
                client.getOutputStream().flush();
                System.out.println("Еду вперёд");
                goingForward = true;
            } else {
                buttonBack.setEnabled(true);
                buttonLeft.setEnabled(true);
                buttonRight.setEnabled(true);
                client.getOutputStream().write("R0:L0:\n".getBytes());
                client.getOutputStream().flush();
                System.out.println("Остановка");
                goingForward = false;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
    }//GEN-LAST:event_buttonGoActionPerformed

    //Закрытие клентского сокета
    public void closeClient() {
        try {
            if (input != null) {
                input.stop();
                input = null;
            }
            if (video != null) {
                //video.finish();
                video.interrupt();
                video = null;
                toggleVideo.setSelected(false);
            }
            client.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        } finally {
            //if (client.isClosed()) {
            jButton1.setEnabled(true);
            jButton3.setEnabled(false);
            jButton2.setEnabled(false);
            buttonGo.setEnabled(false);
            buttonLeft.setEnabled(false);
            buttonRight.setEnabled(false);
            buttonBack.setEnabled(false);
            controlField.setEnabled(false);
            toggleVideo.setEnabled(false);
            toggleVideo.setSelected(false);
            toggleFF.setEnabled(false);
            toggleFF.setSelected(false);
            toggleTracking.setSelected(false);
            toggleTracking.setText("GO!");
            toggleTracking.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tank/icons/media-playback-start.png")));
            adjustButton.setSelected(false);
            jTabbedPane2.setSelectedIndex(0);
            jTabbedPane2.setEnabled(false);
            lastIndex = 0;
            buttonSTOP.setEnabled(false);
            buttonReboot.setEnabled(false);
            buttonRestart.setEnabled(false);
            buttonShutdown.setEnabled(false);
            toggleAdjust.setVisible(false);
            canvas1.getGraphics().clearRect(0, 0, canvas1.getWidth(), canvas1.getHeight());
            //}
            sendParam=false;
            System.gc();
        }
    }

    //Закрытие клентского сокета (кнопка)
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        closeClient();
    }//GEN-LAST:event_jButton3ActionPerformed

    //Отправка команды
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            client.getOutputStream().write((message.getText() + '\n').getBytes());
            client.getOutputStream().flush();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    //Подключение к серверу
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try {
            if (input != null) {
                input.stop();
                input = null;
            }
            if (video != null) {
                //video.finish();
                video.interrupt();
                video = null;
                toggleVideo.setSelected(false);
            }
            if (client != null) {
                client.close();
            }
            client = new Socket(); //Клиентский сокет
            //Адрес сервера
            InetSocketAddress adr = new InetSocketAddress(ip.getText(), Integer.parseInt(port.getText()));
            client.connect(adr, 5000);
            if (client.isConnected()) {
                sendParam=true;
                //client.setSoTimeout(6000); //Если за это время ничего не приходит, клиент отрубается
                jButton2.setEnabled(true);
                jButton3.setEnabled(true);
                jButton1.setEnabled(true);
                buttonGo.setEnabled(true);
                buttonLeft.setEnabled(true);
                buttonRight.setEnabled(true);
                buttonBack.setEnabled(true);
                controlField.setEnabled(true);
                toggleVideo.setEnabled(true);
                toggleFF.setEnabled(true);
                jTabbedPane2.setEnabled(true);
                buttonSTOP.setEnabled(true);
                buttonReboot.setEnabled(true);
                buttonRestart.setEnabled(true);
                buttonShutdown.setEnabled(true);
                toggleAdjust.setVisible(false);
                //sendSpeed();
                askParam();
                //Запуск потока чтения данных с сервера
                input = new ReadServer(stateField, client, this);
                input.start();
            }
        } catch (Exception e) {//тут надо что-то написать на случай ошибки подключения
            JOptionPane.showMessageDialog(rootPane, e);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    //Отправка
    private void sendSpeed() {
        try {
            String str = String.valueOf(speedControl.getValue());
            if (str.length() < 2) {
                str = "00" + str;
            } else if (str.length() < 3) {
                str = "0" + str;
            }
            str = 'B' + str + ":\n";
            client.getOutputStream().write(str.getBytes());
            client.getOutputStream().flush();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
    }
    
    //Запрос текущих параметров
    private void askParam() {
        try {
            client.getOutputStream().write("getParam\n".getBytes());
            client.getOutputStream().flush();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
    }
    
    public void getParam(int Hmi, int Hma, int Smi, int Sma, int Bmi, int Bma, int T)
    {
        sendParam=false;
        Hmin.setValue(Hmi);
        Hmax.setValue(Hma);
        Smin.setValue(Smi);
        Smax.setValue(Sma);
        Bmin.setValue(Bmi);
        Bmax.setValue(Bma);
        TD.setValue(T);
        sendParam=true;
    }

    //Отправка команды по нажатию на Enter
    private void messageKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_messageKeyPressed
        if (evt.getKeyCode() == 10 && client != null) {
            if (!client.isClosed()) {
                jButton2ActionPerformed(null);
            }
        }
    }//GEN-LAST:event_messageKeyPressed

    //Регулировка скорости
    private void speedControlStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_speedControlStateChanged
        String str = String.valueOf(speedControl.getValue());
        speedLabel.setText(str);
        try {
            if (client != null) {
                if (!client.isClosed()) {
                    sendSpeed();
                }
            }
        } catch (Exception e) {//тут надо что-то написать на случай ошибки подключения
            JOptionPane.showMessageDialog(rootPane, e);
        }
    }//GEN-LAST:event_speedControlStateChanged

    //Включение видеотрансляции
    private void toggleVideoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleVideoActionPerformed
        try {
            if (toggleVideo.isSelected()) {
                if (client != null) {
                    String str = "video_on\n";
                    client.getOutputStream().write(str.getBytes());
                }
                video = new GetVideo(canvas1);
                video.start();
                toggleFF.setEnabled(false);

            } else {                //Выключение видео
                if (!(toggleTracking.isSelected() || jTabbedPane2.getSelectedIndex() == 2)) {
                    toggleFF.setEnabled(true);
                }
                if (client != null) {
                    String str = "video_off\n";
                    client.getOutputStream().write(str.getBytes());
                    client.getOutputStream().flush();
                }
                if (video != null) {
                    video.interrupt();
                    video = null;
                    System.gc();
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
    }//GEN-LAST:event_toggleVideoActionPerformed

    //Включение FFserver на платформе
    private void toggleFFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleFFActionPerformed
        try {
            if (client != null) {
                if (toggleFF.isSelected()) {
                    String str = "ff_on\n";
                    client.getOutputStream().write(str.getBytes());
                    client.getOutputStream().flush();
                    toggleVideo.setEnabled(false);
                    adjustButton.setEnabled(false);
                    toggleTracking.setEnabled(false);
                } else {
                    String str = "ff_off\n";
                    client.getOutputStream().write(str.getBytes());
                    client.getOutputStream().flush();
                    toggleVideo.setEnabled(true);
                    adjustButton.setEnabled(true);
                    toggleTracking.setEnabled(true);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
    }//GEN-LAST:event_toggleFFActionPerformed

    private void clearMsgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearMsgActionPerformed
        stateField.setText("");
    }//GEN-LAST:event_clearMsgActionPerformed

    //Отправка параметров для слежения за точкой
    private void sendPARAMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendPARAMActionPerformed
        String str = "";
        str += String.valueOf(Hmin.getValue());
        str += ' ';
        str += String.valueOf(Hmax.getValue());
        str += ' ';
        str += String.valueOf(Smin.getValue());
        str += ' ';
        str += String.valueOf(Smax.getValue());
        str += ' ';
        str += String.valueOf(Bmin.getValue());
        str += ' ';
        str += String.valueOf(Bmax.getValue());
        str += ' ';
        str += String.valueOf(TD.getValue());
        str += '\n';
        try {
            if (client != null && sendParam) {
                String param = "PARAM ";
                param += str;
                client.getOutputStream().write(param.getBytes());
                client.getOutputStream().flush();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
        /*
        try {
            File jarpath = new File(mainJFrame.class.getProtectionDomain().getCodeSource().getLocation().toURI());
            File paramFile = new File(jarpath.getParent() + "/param.ini");
            FileWriter saveFile = new FileWriter(paramFile);
            str = str.replace(' ', '\n');
            saveFile.write(str);
            saveFile.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
        */
    }//GEN-LAST:event_sendPARAMActionPerformed

    //Переключение слежения за точкой
    private void toggleTrackingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleTrackingActionPerformed
        try {
            if (toggleTracking.isSelected()) {
                if (client != null) {
                    String str = "tracking_on\n";
                    client.getOutputStream().write(str.getBytes());
                    client.getOutputStream().flush();
                }
                toggleFF.setEnabled(false);
                toggleTracking.setText("STOP!");
                toggleTracking.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tank/icons/media-playback-stop.png")));
            } else {                //Выключение слежения за точкой
                if (client != null) {
                    String str = "tracking_off\n";
                    client.getOutputStream().write(str.getBytes());
                    client.getOutputStream().flush();
                    sendSpeed();
                }
                if (!(toggleVideo.isSelected() || jTabbedPane2.getSelectedIndex() == 2)) {
                    toggleFF.setEnabled(true);
                }
                toggleTracking.setText("GO!");
                toggleTracking.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tank/icons/media-playback-start.png")));
            }
            autoStopCheckActionPerformed(null);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
    }//GEN-LAST:event_toggleTrackingActionPerformed

    private void HminStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_HminStateChanged
        LabelHmin.setText(String.valueOf(Hmin.getValue()));
        Hmax.setMinimum(Hmin.getValue() + 1);
        sendPARAMActionPerformed(null);
    }//GEN-LAST:event_HminStateChanged

    private void HmaxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_HmaxStateChanged
        LabelHmax.setText(String.valueOf(Hmax.getValue()));
        Hmin.setMaximum(Hmax.getValue() - 1);
        sendPARAMActionPerformed(null);
    }//GEN-LAST:event_HmaxStateChanged

    private void SminStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SminStateChanged
        LabelSmin.setText(String.valueOf(Smin.getValue()));
        Smax.setMinimum(Smin.getValue() + 1);
        sendPARAMActionPerformed(null);
    }//GEN-LAST:event_SminStateChanged

    private void SmaxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SmaxStateChanged
        LabelSmax.setText(String.valueOf(Smax.getValue()));
        Smin.setMaximum(Smax.getValue() - 1);
    }//GEN-LAST:event_SmaxStateChanged

    private void BminStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_BminStateChanged
        LabelBmin.setText(String.valueOf(Bmin.getValue()));
        Bmax.setMinimum(Bmin.getValue() + 1);
        sendPARAMActionPerformed(null);
    }//GEN-LAST:event_BminStateChanged

    private void BmaxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_BmaxStateChanged
        LabelBmax.setText(String.valueOf(Bmax.getValue()));
        Bmin.setMaximum(Bmax.getValue() - 1);
        sendPARAMActionPerformed(null);
    }//GEN-LAST:event_BmaxStateChanged

    //Подключение к серверу по нажатию Enter
    private void ipKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ipKeyPressed
        if (evt.getKeyCode() == 10) {
            jButton1ActionPerformed(null);
        }
    }//GEN-LAST:event_ipKeyPressed

    private void portKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_portKeyPressed
        if (evt.getKeyCode() == 10) {
            jButton1ActionPerformed(null);
        }
    }//GEN-LAST:event_portKeyPressed

    //Выключение робота
    private void buttonShutdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonShutdownActionPerformed
        try {
            client.getOutputStream().write("shutdown\n".getBytes());
            client.getOutputStream().flush();
            goingForward = false;
            closeClient();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
    }//GEN-LAST:event_buttonShutdownActionPerformed

    //Остановка робота
    private void buttonSTOPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSTOPActionPerformed
        try {
            client.getOutputStream().write("R0:L0:SAUoff:\n".getBytes());
            client.getOutputStream().flush();
            System.out.println("STOP");
            goingForward = false;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
    }//GEN-LAST:event_buttonSTOPActionPerformed

    //Перезапуск сервера
    private void buttonRestartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRestartActionPerformed
        try {
            client.getOutputStream().write("restart\n".getBytes());
            client.getOutputStream().flush();
            goingForward = false;
            closeClient();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
    }//GEN-LAST:event_buttonRestartActionPerformed

    //Перезагрузка бортового компьютера робота
    private void buttonRebootActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRebootActionPerformed
        try {
            client.getOutputStream().write("reset\n".getBytes());
            client.getOutputStream().flush();
            goingForward = false;
            closeClient();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
    }//GEN-LAST:event_buttonRebootActionPerformed

    private void toggleAdjustActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleAdjustActionPerformed
        try {
            if (toggleAdjust.isSelected()) {
                if (client != null) {
                    String str = "adjust_on\n";
                    client.getOutputStream().write(str.getBytes());
                    client.getOutputStream().flush();
                }
                toggleFF.setEnabled(false);
                jTabbedPane2.setEnabled(false);

            } else {                //Выключение настройки дальности
                if (!(toggleVideo.isSelected() || toggleTracking.isSelected())) {
                    toggleFF.setEnabled(true);
                }
                toggleAdjust.setVisible(false);
                jTabbedPane2.setEnabled(true);
                if (client != null) {
                    String str = "adjust_off\n";
                    client.getOutputStream().write(str.getBytes());
                    client.getOutputStream().flush();
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
    }//GEN-LAST:event_toggleAdjustActionPerformed

    private void adjustButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adjustButtonActionPerformed
        toggleAdjust.setVisible(true);
        if (!toggleAdjust.isSelected()) {
            JOptionPane.showMessageDialog(rootPane, "Put a colored object at distance of 1m straight and 20 cm right in front of the camera.\n Then press \"Start adjusting\" button.\n After a few seconds press it again.");
        }
    }//GEN-LAST:event_adjustButtonActionPerformed

    //Смена вкладок
    private void jTabbedPane2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane2StateChanged
        if (jTabbedPane2.getSelectedIndex() == 2 && !toggleFF.isSelected()) {
            toggleTracking.setSelected(false);
            toggleTracking.setText("GO!");
            toggleTracking.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tank/icons/media-playback-start.png")));
            //toggleTrackingActionPerformed(null);  //Включение видео для настройки
            if (!toggleVideo.isSelected()) {
                toggleVideo.setSelected(true);
                video = new GetVideo(canvas1);
                video.start();
                toggleFF.setEnabled(false);
            }
            try {
                client.getOutputStream().write("settings_on\n".getBytes());
                client.getOutputStream().flush();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, e);
            }
        } else {
            if (lastIndex == 2 && client != null) {
                if (!client.isClosed()) {
                    try {
                        client.getOutputStream().write("settings_off\n".getBytes());
                        client.getOutputStream().flush();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(rootPane, e);
                    }
                }
            }
        }
        lastIndex = jTabbedPane2.getSelectedIndex();
    }//GEN-LAST:event_jTabbedPane2StateChanged

    //Изменение времени дискретизации
    private void TDStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_TDStateChanged
        LabelTD.setText(String.valueOf(TD.getValue()));
        sendPARAMActionPerformed(null);
    }//GEN-LAST:event_TDStateChanged

    //Останавливать ли робот при потере сигнала
    private void autoStopCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoStopCheckActionPerformed
        if (autoStopCheck.isSelected()) {
            try {
                client.getOutputStream().write("autonom_off\n".getBytes());
                client.getOutputStream().flush();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, e);
            }
        } else {
            try {
                client.getOutputStream().write("autonom_on\n".getBytes());
                client.getOutputStream().flush();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, e);
            }
        }
    }//GEN-LAST:event_autoStopCheckActionPerformed

    //Информация о проекте
    private void buttonAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAboutActionPerformed
        String info = "Mobile robot - caterpillar platform\n";
        info += "Project of students from MIREA, Moscow, Russia\n\n";
        info += "Main Developer:\n";
        info += "A.A. Barashkov\n\n";
        info += "Assistant in hardware development:\n";
        info += "A.D. Bezkhmelnov\n\n";
        info += "Additional assistant:\n";
        info += "E.S. Gudilin\n\n";
        info += "Scientific supervisor:\n";
        info += "Professor A.B. Filimonov";
        JOptionPane.showMessageDialog(rootPane, info, "About the project", INFORMATION_MESSAGE);
    }//GEN-LAST:event_buttonAboutActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSlider Bmax;
    private javax.swing.JSlider Bmin;
    private javax.swing.JSlider Hmax;
    private javax.swing.JSlider Hmin;
    private javax.swing.JLabel LabelBmax;
    private javax.swing.JLabel LabelBmin;
    private javax.swing.JLabel LabelHmax;
    private javax.swing.JLabel LabelHmin;
    private javax.swing.JLabel LabelSmax;
    private javax.swing.JLabel LabelSmin;
    private javax.swing.JLabel LabelTD;
    private javax.swing.JSlider Smax;
    private javax.swing.JSlider Smin;
    private javax.swing.JSlider TD;
    private javax.swing.JButton adjustButton;
    private javax.swing.JCheckBox autoStopCheck;
    private javax.swing.JButton buttonAbout;
    private javax.swing.JToggleButton buttonBack;
    private javax.swing.JToggleButton buttonGo;
    private javax.swing.JToggleButton buttonLeft;
    private javax.swing.JButton buttonReboot;
    private javax.swing.JButton buttonRestart;
    private javax.swing.JToggleButton buttonRight;
    private javax.swing.JButton buttonSTOP;
    private javax.swing.JButton buttonShutdown;
    private java.awt.Canvas canvas1;
    private javax.swing.JButton clearMsg;
    private javax.swing.JTextField controlField;
    private javax.swing.JTextField ip;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextField message;
    private javax.swing.JTextField port;
    private javax.swing.JButton sendPARAM;
    private javax.swing.JSlider speedControl;
    private javax.swing.JLabel speedLabel;
    private javax.swing.JTextField stateField;
    private javax.swing.JToggleButton toggleAdjust;
    private javax.swing.JToggleButton toggleFF;
    private javax.swing.JToggleButton toggleTracking;
    private javax.swing.JToggleButton toggleVideo;
    // End of variables declaration//GEN-END:variables
}
